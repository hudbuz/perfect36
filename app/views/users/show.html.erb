
<br><br>


<head>
<title><%=@user.name%></title>
<div id="userId"><% @user.id %></div>

<style>
			div #d3 {
				font-family: 'Open Sans', sans-serif;
				font-size: 11px;
				font-weight: 300;
				fill: #242424;
				text-align: center;
				text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;
				cursor: default;
			}

			.legend {
				font-family: 'Raleway', sans-serif;
				fill: #333333;
			}

			.tooltip {
				fill: #333333;
			}
		</style>
</head>
<body>

<div id="welcome_container">
<h1 id="welcome_user">Welcome <%= @user.name %></h1>
<h3 id="tutorName">Your tutor is <%= User.find(@user.tutor_id).name %></h3><br><br>
</div>

<div id="d3">

		<div class="radarChart"></div>


</div>
<div id="tests" class="col-sm-9" >
</div>

<br><br>

<% if @available != nil %>
<div id="new_test_button">

 <%= button_to "Take New Test", new_user_test_path(@user), class: 'btn btn-primary btn-lg' %>
</div>
<% else %>
<div class="display text-center">You have completed all available tests. Check back soon for new additions. </div>
<% end %>


<script type="text/javascript">
$(function() {

  function RadarChart(id, data, options) {
	var cfg = {
	 w: 500,				//Width of the circle
	 h: 500,				//Height of the circle
	 margin: {top: 20, right: 20, bottom: 20, left: 20}, //The margins of the SVG
	 levels: 36,				//How many levels or inner circles should there be drawn
	 maxValue: 36, 			//What is the value that the biggest circle will represent
	 labelFactor: 1.25, 	//How much farther than the radius of the outer circle should the labels be placed
	 wrapWidth: 60, 		//The number of pixels after which a label needs to be given a new line
	 opacityArea: 0.35, 	//The opacity of the area of the blob
	 dotRadius: 4, 			//The size of the colored circles of each blog
	 opacityCircles: 0.4, 	//The opacity of the circles of each blob
	 strokeWidth: 2, 		//The width of the stroke around each blob
	 roundStrokes: false,	//If true the area and stroke will follow a round path (cardinal-closed)
	 color: d3.scale.category10()	//Color function
	};

	//Put all of the options into a variable called cfg
	if('undefined' !== typeof options){
	  for(var i in options){
		if('undefined' !== typeof options[i]){ cfg[i] = options[i]; }
	  }//for i
	}//if

	//If the supplied maxValue is smaller than the actual one, replace by the max in the data
	var maxValue = Math.max(cfg.maxValue, d3.max(data, function(i){return d3.max(i.map(function(o){return o.value;}))}));

	var allAxis = (data[0].map(function(i, j){return i.axis})),	//Names of each axis
		total = allAxis.length,					//The number of different axes
		radius = Math.min(cfg.w/2, cfg.h/2), 	//Radius of the outermost circle
		Format = d3.format(''),			 	//Percentage formatting
		angleSlice = Math.PI * 2 / total;		//The width in radians of each "slice"

	//Scale for the radius
	var rScale = d3.scale.linear()
		.range([0, radius])
		.domain([0, maxValue]);

	/////////////////////////////////////////////////////////
	//////////// Create the container SVG and g /////////////
	/////////////////////////////////////////////////////////

	//Remove whatever chart with the same id/class was present before
	d3.select(id).select("svg").remove();

	//Initiate the radar chart SVG
	var svg = d3.select(id).append("svg")
			.attr("width",  cfg.w + cfg.margin.left + cfg.margin.right)
			.attr("height", cfg.h + cfg.margin.top + cfg.margin.bottom)
			.attr("class", "radar"+id);
	//Append a g element
	var g = svg.append("g")
			.attr("transform", "translate(" + (cfg.w/2 + cfg.margin.left) + "," + (cfg.h/2 + cfg.margin.top) + ")");

	/////////////////////////////////////////////////////////
	////////// Glow filter for some extra pizzazz ///////////
	/////////////////////////////////////////////////////////

	//Filter for the outside glow
	var filter = g.append('defs').append('filter').attr('id','glow'),
		feGaussianBlur = filter.append('feGaussianBlur').attr('stdDeviation','2.5').attr('result','coloredBlur'),
		feMerge = filter.append('feMerge'),
		feMergeNode_1 = feMerge.append('feMergeNode').attr('in','coloredBlur'),
		feMergeNode_2 = feMerge.append('feMergeNode').attr('in','SourceGraphic');

	/////////////////////////////////////////////////////////
	/////////////// Draw the Circular grid //////////////////
	/////////////////////////////////////////////////////////

	//Wrapper for the grid & axes
	var axisGrid = g.append("g").attr("class", "axisWrapper");

	//Draw the background circles
	axisGrid.selectAll(".levels")
	   .data(d3.range(1,(cfg.levels+1)).reverse())
	   .enter()
		.append("circle")
		.attr("class", "gridCircle")
		.attr("r", function(d, i){return radius/cfg.levels*d;})
		.style("fill", "#CDCDCD")
		.style("stroke", "#CDCDCD")
		.style("fill-opacity", cfg.opacityCircles)
		.style("filter" , "url(#glow)");

	//Text indicating at what % each level is
	axisGrid.selectAll(".axisLabel")
	   .data(d3.range(1,(cfg.levels+1)).reverse())
	   .enter().append("text")
	   .attr("class", "axisLabel")
	   .attr("x", 4)
	   .attr("y", function(d){return -d*radius/cfg.levels;})
	   .attr("dy", "0.4em")
	   .style("font-size", "10px")
	   .attr("fill", "#737373")
	   .text(function(d,i) { return Format(maxValue * d/cfg.levels); });

	/////////////////////////////////////////////////////////
	//////////////////// Draw the axes //////////////////////
	/////////////////////////////////////////////////////////

	//Create the straight lines radiating outward from the center
	var axis = axisGrid.selectAll(".axis")
		.data(allAxis)
		.enter()
		.append("g")
		.attr("class", "axis");
	//Append the lines
	axis.append("line")
		.attr("x1", 0)
		.attr("y1", 0)
		.attr("x2", function(d, i){ return rScale(maxValue*1.1) * Math.cos(angleSlice*i - Math.PI/2); })
		.attr("y2", function(d, i){ return rScale(maxValue*1.1) * Math.sin(angleSlice*i - Math.PI/2); })
		.attr("class", "line")
		.style("stroke", "white")
		.style("stroke-width", "2px");

	//Append the labels at each axis
	axis.append("text")
		.attr("class", "legend")
		.style("font-size", "11px")
		.attr("text-anchor", "middle")
		.attr("dy", "0.35em")
		.attr("x", function(d, i){ return rScale(maxValue * cfg.labelFactor) * Math.cos(angleSlice*i - Math.PI/2); })
		.attr("y", function(d, i){ return rScale(maxValue * cfg.labelFactor) * Math.sin(angleSlice*i - Math.PI/2); })
		.text(function(d){return d})
		.call(wrap, cfg.wrapWidth);

	/////////////////////////////////////////////////////////
	///////////// Draw the radar chart blobs ////////////////
	/////////////////////////////////////////////////////////

	//The radial line function
	var radarLine = d3.svg.line.radial()
		.interpolate("linear-closed")
		.radius(function(d) { return rScale(d.value); })
		.angle(function(d,i) {	return i*angleSlice; });

	if(cfg.roundStrokes) {
		radarLine.interpolate("cardinal-closed");
	}

	//Create a wrapper for the blobs
	var blobWrapper = g.selectAll(".radarWrapper")
		.data(data)
		.enter().append("g")
		.attr("class", "radarWrapper");

	//Append the backgrounds
	blobWrapper
		.append("path")
		.attr("class", "radarArea")
		.attr("d", function(d,i) { return radarLine(d); })
		.style("fill", function(d,i) { return cfg.color(i); })
		.style("fill-opacity", cfg.opacityArea)
		.on('mouseover', function (d,i){
			//Dim all blobs
			d3.selectAll(".radarArea")
				.transition().duration(200)
				.style("fill-opacity", 0.1);
			//Bring back the hovered over blob
			d3.select(this)
				.transition().duration(200)
				.style("fill-opacity", 0.7);
		})
		.on('mouseout', function(){
			//Bring back all blobs
			d3.selectAll(".radarArea")
				.transition().duration(200)
				.style("fill-opacity", cfg.opacityArea);
		});

	//Create the outlines
	blobWrapper.append("path")
		.attr("class", "radarStroke")
		.attr("d", function(d,i) { return radarLine(d); })
		.style("stroke-width", cfg.strokeWidth + "px")
		.style("stroke", function(d,i) { return cfg.color(i); })
		.style("fill", "none")
		.style("filter" , "url(#glow)");

	//Append the circles
	blobWrapper.selectAll(".radarCircle")
		.data(function(d,i) { return d; })
		.enter().append("circle")
		.attr("class", "radarCircle")
		.attr("r", cfg.dotRadius)
		.attr("cx", function(d,i){ return rScale(d.value) * Math.cos(angleSlice*i - Math.PI/2); })
		.attr("cy", function(d,i){ return rScale(d.value) * Math.sin(angleSlice*i - Math.PI/2); })
		.style("fill", function(d,i,j) { return cfg.color(j); })
		.style("fill-opacity", 0.8);

	/////////////////////////////////////////////////////////
	//////// Append invisible circles for tooltip ///////////
	/////////////////////////////////////////////////////////

	//Wrapper for the invisible circles on top
	var blobCircleWrapper = g.selectAll(".radarCircleWrapper")
		.data(data)
		.enter().append("g")
		.attr("class", "radarCircleWrapper");

	//Append a set of invisible circles on top for the mouseover pop-up
	blobCircleWrapper.selectAll(".radarInvisibleCircle")
		.data(function(d,i) { return d; })
		.enter().append("circle")
		.attr("class", "radarInvisibleCircle")
		.attr("r", cfg.dotRadius*1.5)
		.attr("cx", function(d,i){ return rScale(d.value) * Math.cos(angleSlice*i - Math.PI/2); })
		.attr("cy", function(d,i){ return rScale(d.value) * Math.sin(angleSlice*i - Math.PI/2); })
		.style("fill", "none")
		.style("pointer-events", "all")
		.on("mouseover", function(d,i) {
			newX =  parseFloat(d3.select(this).attr('cx')) - 10;
			newY =  parseFloat(d3.select(this).attr('cy')) - 10;

			tooltip
				.attr('x', newX)
				.attr('y', newY)
				.text(Format(d.value))
				.transition().duration(200)
				.style('opacity', 1);
		})
		.on("mouseout", function(){
			tooltip.transition().duration(200)
				.style("opacity", 0);
		});

	//Set up the small tooltip for when you hover over a circle
	var tooltip = g.append("text")
		.attr("class", "tooltip")
		.style("opacity", 0);

	/////////////////////////////////////////////////////////
	/////////////////// Helper Function /////////////////////
	/////////////////////////////////////////////////////////

	//Taken from http://bl.ocks.org/mbostock/7555321
	//Wraps SVG text
	function wrap(text, width) {
	  text.each(function() {
		var text = d3.select(this),
			words = text.text().split(/\s+/).reverse(),
			word,
			line = [],
			lineNumber = 0,
			lineHeight = 1.4, // ems
			y = text.attr("y"),
			x = text.attr("x"),
			dy = parseFloat(text.attr("dy")),
			tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");

		while (word = words.pop()) {
		  line.push(word);
		  tspan.text(line.join(" "));
		  if (tspan.node().getComputedTextLength() > width) {
			line.pop();
			tspan.text(line.join(" "));
			line = [word];
			tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
		  }
		}
	  });
	}//wrap

}//RadarChart

  var url = document.URL

  $.get(url + '.json', function(data) {
    ///begin d3 rendering
    var margin = {top: 75, right: 80, bottom: 10, left: 80},
      width = Math.min(700, window.innerWidth - 10) - margin.left - margin.right,
      height = Math.min(width, window.innerHeight - margin.top - margin.bottom - 20);


      //////////////////////////////////////////////////////////////
      //////////////////// Draw the Chart //////////////////////////
      //////////////////////////////////////////////////////////////

      var color = d3.scale.ordinal()
        .range(["#EDC951","#CC333F","#00A0B0"]);

      var radarChartOptions = {
        w: width,
        h: height,
        margin: margin,
        maxValue: 36,
        levels: 18,
        roundStrokes: true,
        color: color
      };
      var testData = []
      for (i = 0; i < data['tests'].length; i ++){
        if (data['tests'][i]['total_score'] !== null){
        testData.push([])
        testData[i].push({axis:'Total Score', value: data['tests'][i]['total_score'], answer_key: data['tests'][i]['answer_key_id']},
        {axis:'Math', value: data['tests'][i]['math_score'], answer_key: data['tests'][i]['answer_key_id']},
        {axis:'Reading', value: data['tests'][i]['reading_score'], answer_key: data['tests'][i]['answer_key_id']},
        {axis:'Science', value: data['tests'][i]['science_score'], answer_key: data['tests'][i]['answer_key_id']},
        {axis:'English', value: data['tests'][i]['english_score'], answer_key: data['tests'][i]['answer_key_id']})
      }
      }
      //Call function to draw the Radar chart
      RadarChart(".radarChart", testData, radarChartOptions);





    ///test information located at bottom of page
    $('#welcome_user').html('Welcome '+ data["name"])
    var tests = data["tests"]

    if (tests !== []) {
      $('#tests').html("")

      $('#tests').append('<h3>Previous Tests:</h3>')


      for (i = 0; i < tests.length; i ++) {
         $('#tests').append('<div class="taken_tests col-sm-4" id="'+ tests[i]["id"]+'"><p class="lead">'+'Answer Key' + tests[i]["answer_key_id"] + '</p></div>' )

        $('#'+tests[i]["id"]).append('<li class="list-group-item">English Score: ' + tests[i]["english_score"]+'</li>')
        $('#'+tests[i]["id"]).append('<li class="list-group-item">Math Score: '+ tests[i]["math_score"]+'</li>')
        $('#'+tests[i]["id"]).append('<li class="list-group-item">Reading Score: ' + tests[i]["reading_score"]+'</li>')
        $('#'+tests[i]["id"]).append('<li class="list-group-item">Science Score: ' + tests[i]["science_score"]+'</li>')
        $('#'+tests[i]["id"]).append('<li class="list-group-item">Total Score: ' + tests[i]["total_score"]+'</li>')
        $('#'+tests[i]["id"]).append('<a href="/users/'+data["id"]+'/tests/'+tests[i]["id"]+'">View Full Test Report</a>')
    }}

//     if (tests !== []) {
//
//       var sample_data = []
//       for (i = 0; i < tests.length; i ++){
//         if (tests[i]['total_score'] !== null){
//         var english = {name: tests[i]['answer_key_id'], section: 'english', value: tests[i]['english_score']}
//         var math = {name: tests[i]['answer_key_id'], section: 'math', value: tests[i]['math_score']}
//         var reading = {name: tests[i]['answer_key_id'], section: 'reading', value: tests[i]['reading_score']}
//         var science = {name: tests[i]['answer_key_id'], section: 'science', value: tests[i]['science_score']}
//         var total = {name: tests[i]['answer_key_id'], section: 'total', value: tests[i]['total_score']}
//         sample_data.push(english, math, reading, science, total)
//       }}
// //
// var visualization = d3plus.viz()
//   .container("#viz")
//   .data(sample_data)
//   .id(["name", "section"])
//   .size("value")
//   .type("radar")
//   .draw();
//
//     // set the dimensions and margins of the graph
//     var margin = {top: 20, right: 20, bottom: 30, left: 50},
//         width = 960 - margin.left - margin.right,
//         height = 500 - margin.top - margin.bottom;
//
//     // parse the date / time
//     var parseTime = d3.timeParse("%d-%b-%y");
//
//     // set the ranges
//     var x = d3.scaleTime().range([0, width]);
//     var y = d3.scaleLinear().range([height, 0]);
//
//     // define the line
//     var valueline = d3.line()
//         .x(function(d) { return x(d.created_at); })
//         .y(function(d) { return y(d.total_score); });
//
//     // append the svg obgect to the body of the page
//     // appends a 'group' element to 'svg'
//     // moves the 'group' element to the top left margin
//     var svg = d3.select("body").append("svg")
//         .attr("width", width + margin.left + margin.right)
//         .attr("height", height + margin.top + margin.bottom)
//       .append("g")
//         .attr("transform",
//               "translate(" + margin.left + "," + margin.top + ")");
//
//
//
//       // format the data
//       tests.forEach(function(d) {
//           d.created_at = d3.timeParse(d.created_at);
//           d.total_score = d.total_score;
//
//
//       });
//
//       // Scale the range of the data
//       x.domain(d3.extent(tests, function(d) { return d.created_at; }));
//       y.domain([0, d3.max(tests, function(d) { return 36; })]);
//
//       // Add the valueline path.
//       svg.append("path")
//           .data([tests])
//           .attr("class", "line")
//           .attr("d", valueline);
//
//       // Add the X Axis
//       svg.append("g")
//           .attr("transform", "translate(0," + height + ")")
//           .call(d3.axisBottom(x));
//
//       // Add the Y Axis
//       svg.append("g")
//           .call(d3.axisLeft(y));


})
  })




</script>

</body>
